#ifndef FIFTYONE_DEGREES_IPI_INCLUDED
#define FIFTYONE_DEGREES_IPI_INCLUDED

#if !defined(DEBUG) && !defined(_DEBUG) && !defined(NDEBUG)
#define NDEBUG
#endif

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <math.h>
#include <time.h>
#include <ctype.h>
#include <assert.h>
#ifdef _MSC_VER
#include <windows.h>
#endif
#include "common-cxx/data.h"
#include "common-cxx/exceptions.h"
#include "common-cxx/threading.h"
#include "common-cxx/file.h"
#include "common-cxx/collection.h"
#include "common-cxx/evidence.h"
#include "common-cxx/list.h"
#include "common-cxx/resource.h"
#include "common-cxx/properties.h"
#include "common-cxx/status.h"
#include "common-cxx/date.h"
#include "common-cxx/pool.h"
#include "common-cxx/component.h"
#include "common-cxx/property.h"
#include "common-cxx/value.h"
#include "common-cxx/profile.h"
#include "common-cxx/overrides.h"
#include "common-cxx/config.h"
#include "common-cxx/dataset.h"
#include "common-cxx/array.h"
#include "common-cxx/results.h"

/** Default value for the cache concurrency used in the default configuration. */
#ifndef FIFTYONE_DEGREES_CACHE_CONCURRENCY
#ifndef FIFTYONE_DEGREES_NO_THREADING
#define FIFTYONE_DEGREES_CACHE_CONCURRENCY 10
#else
#define FIFTYONE_DEGREES_CACHE_CONCURRENCY 1
#endif
#endif

/**
 * Default value for the difference threshold used in the default configuration.
 */
#ifndef FIFTYONE_DEGREES_HASH_DIFFERENCE
#define FIFTYONE_DEGREES_HASH_DIFFERENCE 0
#endif

/**
 * Default value for the drift threshold used in the default configuration.
 */
#ifndef FIFTYONE_DEGREES_HASH_DRIFT
#define FIFTYONE_DEGREES_HASH_DRIFT 0
#endif

/**
 * Default value for the string cache size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_STRING_CACHE_SIZE
#define FIFTYONE_DEGREES_STRING_CACHE_SIZE 10000
#endif
/**
 * Default value for the string cache loaded size used in the default
 * collection configuration.
 */
#ifndef FIFTYONE_DEGREES_STRING_LOADED
#define FIFTYONE_DEGREES_STRING_LOADED 100
#endif
/**
 * Default value for the ipv4 range cache size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_IP_V4_CACHE_SIZE
#define FIFTYONE_DEGREES_IP_V4_RANGE_CACHE_SIZE 50000
#endif
/**
 * Default value for the ipv4 range cache loaded size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_IP_V4_RANGE_LOADED
#define FIFTYONE_DEGREES_IP_V4_RANGE_LOADED 100
#endif
/**
 * Default value for the ipv4 range cache size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_IP_V6_CACHE_SIZE
#define FIFTYONE_DEGREES_IP_V6_RANGE_CACHE_SIZE 50000
#endif
/**
 * Default value for the ipv4 range cache loaded size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_IP_V6_RANGE_LOADED
#define FIFTYONE_DEGREES_IP_V6_RANGE_LOADED 100
#endif
/**
 * Default value for the ipv4 range cache size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_PROFILE_COMBINATION_CACHE_SIZE
#define FIFTYONE_DEGREES_PROFILE_COMBINATION_CACHE_SIZE 50000
#endif
/**
 * Default value for the ipv4 range cache loaded size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_PROFILE_COMBINATION_RANGE_LOADED
#define FIFTYONE_DEGREES_PROFILE_COMBINATION_RANGE_LOADED 100
#endif
/**
 * Default value for the profile cache size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_PROFILE_CACHE_SIZE
#define FIFTYONE_DEGREES_PROFILE_CACHE_SIZE 10000
#endif
/**
 * Default value for the profile cache loaded size used in the default
 * collection configuration.
 */
#ifndef FIFTYONE_DEGREES_PROFILE_LOADED
#define FIFTYONE_DEGREES_PROFILE_LOADED 100
#endif
/**
 * Default value for the value cache size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_VALUE_CACHE_SIZE
#define FIFTYONE_DEGREES_VALUE_CACHE_SIZE 500
#endif
/**
 * Default value for the value cache loaded size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_VALUE_LOADED
#define FIFTYONE_DEGREES_VALUE_LOADED 0
#endif
/**
 * Default value for the property cache size used in the default collection
 * configuration.
 */
#ifndef FIFTYONE_DEGREES_PROPERTY_CACHE_SIZE
#define FIFTYONE_DEGREES_PROPERTY_CACHE_SIZE 0
#endif
/**
 * Default value for the property cache loaded size used in the default
 * collection configuration.
 */
#ifndef FIFTYONE_DEGREES_PROPERTY_LOADED
#define FIFTYONE_DEGREES_PROPERTY_LOADED INT_MAX
#endif

/**
 * DATA STRUCTURES
 */

typedef struct fiftyone_degrees_ipi_dataset_header_t {
	const int32_t versionMajor;
	const int32_t versionMinor;
	const int32_t versionBuild;
	const int32_t versionRevision;
	const byte tag[16];
	const byte exportTag[16];
	const int32_t copyrightOffset;
	const int16_t age;
	const int32_t minUserAgentCount;
	const int32_t nameOffset;
	const int32_t formatOffset;
	const fiftyoneDegreesDate published;
	const fiftyoneDegreesDate nextUpdate;
	const fiftyoneDegreesCollectionHeader strings;
	const fiftyoneDegreesCollectionHeader components;
	const fiftyoneDegreesCollectionHeader maps;
	const fiftyoneDegreesCollectionHeader properties;
	const fiftyoneDegreesCollectionHeader values;
	const fiftyoneDegreesCollectionHeader profiles;
	const fiftyoneDegreesCollectionHeader ipv4Ranges;
	const fiftyoneDegreesCollectionHeader ipv6Ranges;
	const fiftyoneDegreesCollectionHeader profileCombinations;
	const fiftyoneDegreesCollectionHeader profileOffsets;
} fiftyoneDegreesDataSetIpiHeader;

typedef struct fiftyone_degrees_config_ipi_t {
	fiftyoneDegreesConfigBase b;
	fiftyoneDegreesCollectionConfig strings;
	fiftyoneDegreesCollectionConfig components;
	fiftyoneDegreesCollectionConfig maps;
	fiftyoneDegreesCollectionConfig properties;
	fiftyoneDegreesCollectionConfig values;
	fiftyoneDegreesCollectionConfig profiles;
	fiftyoneDegreesCollectionConfig ipv4Ranges;
	fiftyoneDegreesCollectionConfig ipv6Ranges;
	fiftyoneDegreesCollectionConfig profileCombinations;
	fiftyoneDegreesCollectionConfig profileOffsets;
} fiftyoneDegreesConfigIpi;

typedef struct fiftyone_degrees_dataset_ipi_base_t {
	fiftyoneDegreesDataSetBase b;
} fiftyoneDegreesDataSetIpiBase;

typedef struct fiftyone_degrees_dataset_ipi_t {
	fiftyoneDegreesDataSetIpiBase b;
	const fiftyoneDegreesDataSetIpiHeader header;
	const fiftyoneDegreesConfigIpi config;
	fiftyoneDegreesCollection *strings;
	fiftyoneDegreesCollection *components;
	fiftyoneDegreesList componentsList;
	bool *componentsAvailable;
	fiftyoneDegreesCollection *maps;
	fiftyoneDegreesCollection *properties;
	fiftyoneDegreesCollection *values;
	fiftyoneDegreesCollection *profiles;
	fiftyoneDegreesCollection *ipv4Ranges;
	fiftyoneDegreesCollection *ipv6Ranges;
	fiftyoneDegreesCollection *profileCombinations;
	fiftyoneDegreesCollection *profileOffsets;
} fiftyoneDegreesDataSetIpi;

typedef struct fiftyone_degrees_ipi_list_t {
	fiftyoneDegreesProfilePercentage* item;
	uint32_t capacity;
	uint32_t count;
} fiftyoneDegreesIpiList;

typedef struct fiftyone_degrees_ipi_range_t {
	float start;
	float end;
} fiftyoneDegreesIpiRange;

typedef struct fiftyone_degrees_ipi_location_t {
	float lat;
	float lon;
} fiftyoneDegreesIpiLocation;

typedef struct fiftyone_degrees_result_ipi_t {
	fiftyoneDegreesEvidenceIpType type;
	uint32_t ipRangeOffset;
	fiftyoneDegreesIpiRange ipRange;
	fiftyoneDegreesIpiLocation averageLocation;
	fiftyoneDegreesIpiLocation locationBoundNorthWest;
	fiftyoneDegreesIpiLocation locationBoundSouthWest;
} fiftyoneDegreesResultIpi;

typedef struct fiftyone_degrees_profile_percentage_t {
	fiftyoneDegreesCollectionItem item;
	float percentage;
} fiftyoneDegreesProfilePercentage;

/**
 * Macro defining the common memebers of an Ipi result.
 */
#define FIFTYONE_DEGREES_RESULTS_IPI_MEMBERS \
	fiftyoneDegreesResultsBase b; \
	fiftyoneDegreesIpiList values;

FIFTYONE_DEGREES_ARRAY_TYPE(
	fiftyoneDegreesResultIpi,
	FIFTYONE_DEGREES_RESULTS_IPI_MEMBERS)

/**
 * Array of Ipi results used to easily access and track the size of the
 * array.
 */
typedef fiftyoneDegreesResultIpiArray fiftyoneDegreesResultsIpi;

#pragma pack(push, 1)
typedef struct fiftyone_degrees_dataset_profile_combination_t {
	uint16_t profileCount;
	uint16_t valueCount;
	const byte firstByte;
} fiftyoneDegreesProfileCombination;
#pragma pack(pop)

#define FIFTYONE_DEGREES_IP_RANGE(v, s) \
typedef struct fiftyone_degrees_dataset_ip_v##v##_range_t { \
byte start[s]; \
uint32_t profileCombinationOffset; \
} fiftyoneDegreesDataSetIpv##v##Range;

FIFTYONE_DEGREES_IP_RANGE(4, 4)
FIFTYONE_DEGREES_IP_RANGE(6, 16)

/**
 * MATCH CONFIGURATIONS
 */

/**
 * Configuration to be used where the data set is being created using a buffer
 * in memory and concepts like caching are not required. The concurrency
 * setting is ignored as there are no critical sections with this configuration.
 * In this configuration, only the performance optimised graph is enabled for
 * processing to give the fastest operation.
 */
EXTERNAL fiftyoneDegreesConfigIpi fiftyoneDegreesIpiInMemoryConfig;

/**
 * Highest performance configuration. Loads all the data into memory and does
 * not maintain a connection to the source data file used to build the data
 * set. The concurrency setting is ignored as there are no critical sections
 * with this configuration.
 * In this configuration, only the performance optimised graph is enabled for
 * processing to give the fastest operation.
 */
EXTERNAL fiftyoneDegreesConfigIpi fiftyoneDegreesIpiHighPerformanceConfig;

/**
 * Low memory configuration. A connection is maintained to the source data file
 * used to build the data set and used to load data into memory when required.
 * No caching is used resulting in the lowest memory footprint at the expense
 * of performance. The concurrency of each collection must be set to the
 * maximum number of concurrent operations to optimize file reads.
 * In this configuration, both the performance and predictive graphs are
 * enabled, as performance is not as big of a concern in this configuration, so
 * falling back to the more predictive graph if nothing is found on the first
 * pass can be afforded.
 */
EXTERNAL fiftyoneDegreesConfigIpi fiftyoneDegreesIpiLowMemoryConfig;

/**
 * Uses caching to balance memory usage and performance. A connection is
 * maintained to the source data file to load data into caches when required.
 * As the cache is loaded, memory will increase until the cache capacity is
 * reached. The concurrency of each collection must be set to the maximum
 * number of concurrent operations to optimize file reads. This is the default
 * configuration.
 * In this configuration, both the performance and predictive graphs are
 * enabled, as performance is not as big of a concern in this configuration, so
 * falling back to the more predictive graph if nothing is found on the first
 * pass can be afforded.
 */
EXTERNAL fiftyoneDegreesConfigIpi fiftyoneDegreesIpiBalancedConfig;

/**
 * Balanced configuration modified to create a temporary file copy of the
 * source data file to avoid locking the source data file.
 * In this configuration, both the performance and predictive graphs are
 * enabled, as performance is not as big of a concern in this configuration, so
 * falling back to the more predictive graph if nothing is found on the first
 * pass can be afforded.
 */
EXTERNAL fiftyoneDegreesConfigIpi fiftyoneDegreesIpiBalancedTempConfig;

/**
 * Default detection configuration. This configures the data set to not create
 * a temp file, make no allowance for drift and difference and record the
 * matched User-Agent substrings.
 * In this configuration, both the performance and predictive graphs are
 * enabled, as performance is not as big of a concern in this configuration, so
 * falling back to the more predictive graph if nothing is found on the first
 * pass can be afforded.
 */
EXTERNAL fiftyoneDegreesConfigIpi fiftyoneDegreesIpiDefaultConfig;

/**
 * Configuration designed only for testing. This uses a loaded size of 1 in
 * all collections to ensure all every get and release calls can be tested for
 * items which do not exist in the root collection. This configuration is not
 * exposed through C++ intentionally as it is only used in testing.
 */
EXTERNAL fiftyoneDegreesConfigIpi fiftyoneDegreesIpiSingleLoadedConfig;

/**
 * EXTERNAL METHODS
 */

EXTERNAL fiftyoneDegreesDataSetIpi *fiftyoneDegreesDataSetIpiGet(fiftyoneDegreesResourceManager* manager);

EXTERNAL void fiftyoneDegreesDataSetIpiRelease(fiftyoneDegreesDataSetIpi* dataset);

EXTERNAL fiftyoneDegreesStatusCode fiftyoneDegreesIpiInitManagerFromFile(
	fiftyoneDegreesResourceManager *manager,
	fiftyoneDegreesConfigIpi *config,
	fiftyoneDegreesPropertiesRequired *properties,
	const char *fileName,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesStatusCode fiftyoneDegreesIpiInitManagerFromMemory(
	fiftyoneDegreesResourceManager *manager,
	fiftyoneDegreesConfigIpi *config,
	fiftyoneDegreesPropertiesRequired *properties,
	void *memory,
	long size,
	fiftyoneDegreesException *exception);

EXTERNAL void* fiftyoneDegreesProfileCombinationReadFromFile(
	const fiftyoneDegreesCollectionFile *file,
	uint32_t offset,
	fiftyoneDegreesData *data,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesStatusCode fiftyoneDegreesIpiReloadManagerFromFile(
	fiftyoneDegreesResourceManager *manager,
	const char *fileName,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesStatusCode fiftyoneDegreesIpiReloadManagerFromMemory(
	fiftyoneDegreesResourceManager *manager,
	void *source,
	long length,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesStatusCode  fiftyoneDegreesIpiReloadManagerFromOriginalFile(
	fiftyoneDegreesResourceManager *manager,
	fiftyoneDegreesException *exception);

EXTERNAL size_t fiftyoneDegreesIpiSizeManagerFromFile(
	fiftyoneDegreesConfigIpi *config,
	fiftyoneDegreesPropertiesRequired *properties,
	const char *fileName,
	fiftyoneDegreesException *exception);

EXTERNAL size_t fiftyoneDegreesIpiSizeManagerFromMemory(
	fiftyoneDegreesConfigIpi *config,
	fiftyoneDegreesPropertiesRequired *properties,
	void *memory,
	long size,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesResultsIpi *fiftyoneDegreesResultsIpiCreate(
	fiftyoneDegreesResourceManager *manager);

EXTERNAL void fiftyoneDegreesResultsIpiFree(fiftyoneDegreesResultsIpi *results);

EXTERNAL void fiftyoneDegreesResultsIpiFromIp(
	fiftyoneDegreesResultsIpi *results,
	const unsigned char *ip,
	size_t ipLength,
	fiftyoneDegreesEvidenceIpType type,
	fiftyoneDegreesException* exception);

EXTERNAL void fiftyoneDegreesResultsIpiFromIpString(
	fiftyoneDegreesResultsIpi *results,
	const char *ip,
	size_t ipLength,
	fiftyoneDegreesException *exception);

EXTERNAL void fiftyoneDegreesResultsIpiFromEvidence(
	fiftyoneDegreesResultsIpi* results,
	fiftyoneDegreesEvidenceKeyValuePairArray* evidence,
	fiftyoneDegreesException* exception);

EXTERNAL bool fiftyoneDegreesResultsIpiGetHasValues(
	fiftyoneDegreesResultsIpi *results,
	int requiredPropertyIndex,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesResultsNoValueReason fiftyoneDegreesResultsIpiGetNoValueReason(
	fiftyoneDegreesResultsIpi *results,
	int requiredPropertyIndex,
	fiftyoneDegreesException *exception);

EXTERNAL const char *fiftyoneDegreesResultsIpiGetNoValueReasonMessage(
	fiftyoneDegreesResultsNoValueReason reason);

EXTERNAL fiftyoneDegreesProfilePercentage *fiftyoneDegreesResultsIpiGetValues(
	fiftyoneDegreesResultsIpi *results,
	int requiredPropertyIndex,
	fiftyoneDegreesException *exception);

EXTERNAL size_t fiftyoneDegreesResultsIpiGetValuesString(
	fiftyoneDegreesResultsIpi *results,
	const char *propertyName,
	char *buffer,
	size_t bufferLength,
	const char *separator,
	fiftyoneDegreesException *exception);

EXTERNAL size_t fiftyoneDegreesResultsIpiGetValuesStringByRequiredPropertyIndex(
	fiftyoneDegreesResultsIpi *results,
	const int requiredPropertyIndex,
	char *buffer,
	size_t bufferLength,
	const char *separator,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesEvidenceIpType fiftyoneDegreesResultsIpiGetRangeStart(
	fiftyoneDegreesResultsIpi *results,
	unsigned char *buffer,
	size_t bufferLength,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesEvidenceIpType fiftyoneDegreesResultsIpiGetRangeStartString(
	fiftyoneDegreesResultsIpi *results,
	char *buffer,
	size_t bufferLength,
	fiftyoneDegreesException *exception);

EXTERNAL fiftyoneDegreesEvidenceIpType fiftyoneDegreesResultsIpiGetRangeEnd(
	fiftyoneDegreesResultsIpi *results,
	unsigned char *buffer,
	size_t bufferLength,
	fiftyoneDegreesException* exception);

EXTERNAL fiftyoneDegreesEvidenceIpType fiftyoneDegreesResultsIpiGetRangeEndString(
	fiftyoneDegreesResultsIpi *results,
	char *buffer,
	size_t bufferLength,
	fiftyoneDegreesException *exception);

EXTERNAL char *fiftyoneDegreesIpiGetNetworkIdFromResults(
	fiftyoneDegreesResultsIpi *results,
	char *buffer,
	size_t bufferLength,
	fiftyoneDegreesException *exception);

EXTERNAL uint32_t fiftyoneDegreesIpiIterateProfilesForPropertyAndValue(
	fiftyoneDegreesResourceManager *manager,
	const char *propertyName,
	const char *valueName,
	void *state,
	fiftyoneDegreesProfileIterateMethod callback,
	fiftyoneDegreesException *exception);

#endif